#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\begin_modules
knitr
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.54cm
\topmargin 2.54cm
\rightmargin 2.54cm
\bottommargin 2.54cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Stat243
\end_layout

\begin_layout Title
Problem Set 8
\end_layout

\begin_layout Author
Stephanie Kim
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

/raggedright
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Question 1 (a) 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

library("truncnorm")
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

set.seed(0)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Let h be the set of 10000 random numbers from truncated normal distribution
\end_layout

\begin_layout Plain Layout

h <- rtruncnorm (n=10000, a=-Inf, b=-4, mean=-4, sd=1)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Let f be the rescaled truncated t-distribution density composed of the
 random numbers 
\end_layout

\begin_layout Plain Layout

pdf <- dt(h, df=3) 
\end_layout

\begin_layout Plain Layout

cdf <- pt(-4, df=3)
\end_layout

\begin_layout Plain Layout

f <- pdf/cdf 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Let g be the truncated normal distribution density
\end_layout

\begin_layout Plain Layout

g <- dtruncnorm(h, b=-4, mean=-4)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Then the importance sampling estimate of mean of h is mean(h*f/g)
\end_layout

\begin_layout Plain Layout

estimate <- mean(h*f/g)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

hist(h*f/g) 
\end_layout

\begin_layout Plain Layout

hist(f/g)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# We can observe that there are a lot of extreme weights
\end_layout

\begin_layout Plain Layout

# Thus the variance of estimate is large
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Question 1 (b)
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

set.seed(0)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Let h be the set of 10000 random numbers from truncated t distribution
\end_layout

\begin_layout Plain Layout

h <- rt(n=10000, df=3) 
\end_layout

\begin_layout Plain Layout

h <- -abs(x)-4
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Let f be the rescaled truncated t-distribution density composed of the
 random numbers
\end_layout

\begin_layout Plain Layout

pdf <- dt(h, df=3) 
\end_layout

\begin_layout Plain Layout

cdf <- pt(-4, df=3)
\end_layout

\begin_layout Plain Layout

f <- pdf/cdf 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Let g be the t-distirubtion 
\end_layout

\begin_layout Plain Layout

g <- dt(h+4, df=3)*2 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Then the importance sampling estimate of mean of h is mean(h*f/g)
\end_layout

\begin_layout Plain Layout

estimate <- mean(h*f/g)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

hist(h*f/g) 
\end_layout

\begin_layout Plain Layout

hist(f/g)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Relative to 1(a), there are less extreme weights
\end_layout

\begin_layout Plain Layout

# Thus the variance of estimate is smaller
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Question 2 (a)
\end_layout

\begin_layout Standard
Plot slices of the function to get a sense for how it behaves.
\end_layout

\begin_layout Standard
For a constant value of one of the inputs, plot as a 2-d function of the
 other two.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# this is the given code
\end_layout

\begin_layout Plain Layout

theta <- function(x1,x2) atan2(x2, x1)/(2*pi)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

helical <- function(x){
\end_layout

\begin_layout Plain Layout

  f1 <- 10*(x[3] - 10*theta(x[1],x[2]))
\end_layout

\begin_layout Plain Layout

  f2 <- 10*(sqrt(x[1]^2+x[2]^2)-1)
\end_layout

\begin_layout Plain Layout

  f3 <- x[3]
\end_layout

\begin_layout Plain Layout

  return(f1^2+f2^2+f3^2)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# set the bounds of the function we want to plot
\end_layout

\begin_layout Plain Layout

bounds <- (-50:50)
\end_layout

\begin_layout Plain Layout

n <- length(bounds)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# we make 3 empty matrices
\end_layout

\begin_layout Plain Layout

matrix1 <- matrix(0,n,n)
\end_layout

\begin_layout Plain Layout

matrix2 <- matrix(0,n,n)
\end_layout

\begin_layout Plain Layout

matrix3 <- matrix(0,n,n)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# (i,j)th element of matrix1 will give the function output when the first
 input is a constant 
\end_layout

\begin_layout Plain Layout

# (i,j)th element of matrix2 will give the function output when the second
 input is a constant 
\end_layout

\begin_layout Plain Layout

# (i,j)th element of matrix2 will give the function output when the third
 input is a constant 
\end_layout

\begin_layout Plain Layout

for(i in 1:n){
\end_layout

\begin_layout Plain Layout

  for(j in 1:n){
\end_layout

\begin_layout Plain Layout

    matrix1[i,j] <- helical(c(0,bounds[i], bounds[j]))
\end_layout

\begin_layout Plain Layout

    matrix2[i,j] <- helical(c(bounds[i],0,bounds[j]))
\end_layout

\begin_layout Plain Layout

    matrix3[i,j] <- helical(c(bounds[i], bounds[j],0))
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

library("reshape2") 
\end_layout

\begin_layout Plain Layout

library("lattice")
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# by using melt and levelplot functions,  
\end_layout

\begin_layout Plain Layout

# we can plot the output in 2-d function of the other two 
\end_layout

\begin_layout Plain Layout

plot1 <- melt(matrix1)
\end_layout

\begin_layout Plain Layout

names(plot1) <- c("x2", "x3", "value")
\end_layout

\begin_layout Plain Layout

levelplot(value ~ x2 + x3, data=plot1)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

plot2 <- melt(matrix2)
\end_layout

\begin_layout Plain Layout

names(plot2) <- c("x1", "x3", "value")
\end_layout

\begin_layout Plain Layout

levelplot(value ~ x1 + x3, data=plot2)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

plot3 <- melt(matrix3)
\end_layout

\begin_layout Plain Layout

names(plot3) <- c("x1", "x2", "value")
\end_layout

\begin_layout Plain Layout

levelplot(value ~ x1 + x2, data=plot3)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Question 2 (b)
\end_layout

\begin_layout Standard
Try out optim() and nlm() for finding the minimum of this function (or use
 optimx()).
  
\end_layout

\begin_layout Standard
Explore the possibility of multiple local minima by using different starting
 points.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# first set the starting points in each row
\end_layout

\begin_layout Plain Layout

stpts <- t(matrix(c(0,0,0,10,10,10,100,100,100),nrow=3,ncol=3))
\end_layout

\begin_layout Plain Layout

maxit <- 10000
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# the following for loop gives us the local minima using optim() and nlm()
 for each row
\end_layout

\begin_layout Plain Layout

for(i in 1:nrow(stpts)){
\end_layout

\begin_layout Plain Layout

  stpt <- stpts[i,]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  #optimize using optim()
\end_layout

\begin_layout Plain Layout

  ctrl <- list(maxit=maxit, trace=FALSE)
\end_layout

\begin_layout Plain Layout

  optimmin <- optim(par=stpt, fn=helical, method='BFGS', control=ctrl)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  # nlm()
\end_layout

\begin_layout Plain Layout

  nlmmin <- nlm(f=helical, p=stpt)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

 cat("starting point", stpt, "
\backslash
n", "optim:", optimmin$par, "
\backslash
n", "nlm():", nlmmin$estimate, "
\backslash
n")
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Question 3 (a)
\end_layout

\begin_layout Standard
submitting by hand
\end_layout

\begin_layout Section*
Question 3 (b)
\end_layout

\begin_layout Standard
We can run a simple regression on the actual data that is not censored and
 get the whole normal distribution.
\end_layout

\begin_layout Standard
Then we can get the values of beta0, beta1, and sigma^2.
\end_layout

\begin_layout Standard
These should be reasonable starting values for those parameters.
\end_layout

\end_body
\end_document
